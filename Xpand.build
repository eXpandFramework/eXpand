<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="integrate" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <DXVersion>14.2</DXVersion>
    <DXPath>C:\DevExpress $(DXVersion)</DXPath>
    <DBUpdaterPath>$(DXPath)\Components\Tools\eXpressAppFramework\DBUpdater</DBUpdaterPath>
    <ProjectConverterPath>$(DXPath)\Components\Tools\Components</ProjectConverterPath>
    <ProjectConverterName>ProjectConverter.exe</ProjectConverterName>
    <DBUpdaterName>DBUpdater.v$(DXVersion).exe</DBUpdaterName>
    <TestExecutorName>TestExecutor.v$(DXVersion).exe</TestExecutorName>
    <TestExecutorPath>$(DXPath)\Components\Tools\eXpressAppFramework\EasyTest\$(TestExecutorName)</TestExecutorPath>
    <ExtensionTasksPath Condition="'$(ExtensionTasksPath)' == ''">$(MSBuildProjectDirectory)\Support\Build\ExtensionPack\</ExtensionTasksPath>
    <ToolsPath>$(MSBuildProjectDirectory)\Support\Tool</ToolsPath>
    <NuGetTool>$(ToolsPath)\NuGet.exe</NuGetTool>
    <_third_party_assemblies>$(MSBuildProjectDirectory)\Support\_third_party_assemblies</_third_party_assemblies>
    <TwitterTool>$(_third_party_assemblies)\XTwitter.exe</TwitterTool>
	  <BatchCall>false</BatchCall>
    <ExecCommand></ExecCommand>
    <ExecCommandWorkingDirectory></ExecCommandWorkingDirectory>
  
    <!--
			Primary configuration properties (override them via command line if needed
		-->
    <BuildPath Condition="$(BuildPath)==''">$(MSBuildProjectDirectory)\Build</BuildPath>
    <Version Condition="$(Version)==''">0.0.0.0</Version>
    <Configuration Condition="$(Configuration)==''">Release</Configuration>
    <ArtifactDirectory Condition="$(ArtifactDirectory)==''">$(BuildPath)\Artifact</ArtifactDirectory>
    <PackageDirectory Condition="$(PackageDirectory)==''">$(BuildPath)\_Package\$(Version)</PackageDirectory>
    <DeploymentFolder Condition="$(DeploymentFolder)==''">$(BuildPath)\_DeploymentFolder\</DeploymentFolder>
    <InstallerFolder Condition="$(InstallerFolder)==''">$(BuildPath)\Installer</InstallerFolder>
    <XpandDesignExperiencePath>$(MSBuildProjectDirectory)\Support\Xpand.DesignExperience</XpandDesignExperiencePath>
    <!--
			Derived configuration properties
		-->
    <ProjectName>Xpand</ProjectName>
    <TestPath>$(BuildPath)\Test</TestPath>
    <TempPath>$(BuildPath)\Temp</TempPath>
    <XpandDLLPath>$(MSBuildProjectDirectory)\Xpand.DLL</XpandDLLPath>
    <RecompiledDXSources>$(Configuration)</RecompiledDXSources>
    <!--    <RecompiledDXSources>RecompiledDXSources</RecompiledDXSources>-->
    <SkipDashboard Condition="'$(RecompiledDXSources)' == 'RecompiledDXSources'">true</SkipDashboard>
    <OutputFile>$(MSBuildProjectDirectory)\output.txt</OutputFile>

    <SourceExclusions>**\.svn\**\*.*;**\_svn\**\*.*;**\*.user;**\*.suo;**\*.db;**\bin\**\*.*;**\obj\**\*.*;.hg\**\*.*;_hg\**\*.*;.git\**\*.*</SourceExclusions>
    <XpandDocsPath>$(MSBuildProjectDirectory)\Xpand.Docs\</XpandDocsPath>
    <DocsSiteName>documentation.expandframework.com</DocsSiteName>
    <XpandDocsSitePath>C:\inetpub\vhosts\$(DocsSiteName)</XpandDocsSitePath>
  </PropertyGroup>
  <Import Project="Support\Build\MSBuild.Community.Tasks.targets" />
  <Import Project="Support\Build\ExtensionPack\MSBuild.ExtensionPack.tasks" />
  <Import Project="Support\Build\Xpand.projects" />
  <ItemGroup>
    <Tokens Include="SourcePackage">
      <ReplacementValue>$(ProjectName)-Source-$(Version).zip</ReplacementValue>
    </Tokens>
    <Tokens Include="BinaryPackage">
      <ReplacementValue>$(ProjectName)-Lib-$(Version).zip</ReplacementValue>
    </Tokens>
    <Tokens Include="Version">
      <ReplacementValue>$(Version)</ReplacementValue>
    </Tokens>
  </ItemGroup>
  <UsingTask TaskName="MSBuild.ExtensionPack.FileSystem.File" AssemblyFile="Support\build\ExtensionPack\MSBuild.ExtensionPack.dll" />
  <UsingTask TaskName="Mash2.MSBuild.Tasks.Twitter" AssemblyFile="Support\build\Mash2\Mash2.MSBuild.Tasks.dll" />
  <UsingTask TaskFactory="PowershellTaskFactory" TaskName="IndexSources" AssemblyFile="Support\build\ExtensionPack\MSBuild.ExtensionPack.TaskFactory.PowerShell.dll"> 
        <ParameterGroup> 
          <Output Output="true" /> 
        </ParameterGroup> 
        <Task> 
          <![CDATA[
          Set-ExecutionPolicy Unrestricted
          $log.LogMessage([Microsoft.Build.Framework.MessageImportance]"High", "Source code indexing...")
          $var = powershell .\Support\NuSpec\Sourcepack.ps1 -symbolsfolder $(MSBuildProjectDirectory)\Xpand.dll -userId eXpand -repository eXpand -branch master -sourcesRoot $(MSBuildProjectDirectory) -verbose -githuburl https://raw.githubusercontent.com -serverIsRaw -dbgToolsPath "$(ToolsPath)\srcsrv"
          $log.LogMessage([Microsoft.Build.Framework.MessageImportance]"High", $var)
]]>
          
        </Task> 
  </UsingTask> 
  <Target Name="FixReferencesB4Build" Condition="$(SkipFixReferences)!=true">
    <MSBuild Projects=".\Support\FixReferences\FixReferences.csproj" Targets="Build" Properties="Configuration=$(Configuration);OutputPath=$(XpandDLLPath);DefineConstants=$(DefineConstants)"/>
	<MSBuild Projects="$(MSBuildProjectFile)" Targets="ExecuteCommand" Properties="ExecCommand=&quot;$(XpandDLLPath)\FixReferences.exe&quot;" />
  </Target>
  <Target Name="FixReferencesAfterBuild" Condition="$(SkipFixReferences)!=true">
    <MSBuild Projects=".\Support\FixReferences\FixReferences.csproj" Targets="Build" Properties="Configuration=$(Configuration);OutputPath=$(XpandDLLPath);DefineConstants=$(DefineConstants)"/>
	<MSBuild Projects="$(MSBuildProjectFile)" Targets="ExecuteCommand" Properties="ExecCommand=&quot;$(XpandDLLPath)\FixReferences.exe&quot; --afterbuild" />
  </Target>
  <!-- 
	 Solution redirects. Every VS project normally knows how to support these targets
	-->
  <Target Name="Copy3rdPartyAssemblies">
    <CreateItem Include="$(_third_party_assemblies)\**\*.*">
      <Output TaskParameter="Include" ItemName="FilesToCopy"/>
    </CreateItem>
    <Copy SourceFiles="@(FilesToCopy)" DestinationFolder="$(XpandDLLPath)\%(FilesToCopy.RecursiveDir)"  />
  </Target>
  <Target Name="Build" DependsOnTargets="Copy3rdPartyAssemblies;FixReferencesB4Build">
    <MSBuild Projects="@(CoreProjects)" Targets="Build" Properties="Configuration=$(Configuration);OutputPath=$(XpandDLLPath);DefineConstants=$(DefineConstants)" />
    <MSBuild Projects="@(EasyTestProjects)" Targets="Build" Properties="Configuration=$(Configuration);OutputPath=$(XpandDLLPath);DefineConstants=$(DefineConstants)" />
    <MSBuild Projects="@(HelperProjects)" Targets="Build" Properties="Configuration=$(Configuration);OutputPath=$(XpandDLLPath);DefineConstants=$(DefineConstants)" />
    <MSBuild Projects="@(VSAddons)" Targets="Build" Properties="Configuration=$(Configuration);OutputPath=$(XpandDLLPath);DefineConstants=$(DefineConstants)" ContinueOnError="$(BatchCall)" />
    <MSBuild Projects="@(ModuleProjects)" Targets="Build" Properties="Configuration=$(RecompiledDXSources);OutputPath=$(XpandDLLPath);DefineConstants=$(DefineConstants)" />
    <MSBuild Projects="@(NHProjects)" Targets="Build" Properties="Configuration=$(Configuration);OutputPath=$(XpandDLLPath);DefineConstants=$(DefineConstants)" />
    <MSBuild Projects="$(XpandDocsPath)\Xpand.Docs.sln" Targets="Build" Properties="Configuration=$(Configuration);OutputPath=$(XpandDLLPath);DefineConstants=$(DefineConstants)" Condition="$(RecompiledDXSources) == $(Configuration)" />
    <MSBuild Projects="@(DemoSolutions)" Targets="Build" Properties="Configuration=$(Configuration);OutputPath=$(XpandDLLPath);DefineConstants=CodeFirst" />
    <MSBuild Projects="@(DemoTesterProjects)" Targets="Build" Properties="Configuration=$(Configuration);OutputPath=$(XpandDLLPath);DefineConstants=$(DefineConstants)" />
    <MSBuild Projects="Support\XpandTestExecutor\XpandTestExecutor.sln" Targets="Build" Properties="Configuration=$(Configuration);OutputPath=$(XpandDLLPath);DefineConstants=$(DefineConstants)" />
    <ItemGroup>
      <DxAssemblies Include="$(XpandDLLPath)\DevExpress*.*" ></DxAssemblies>
    </ItemGroup>
    <Delete Files="@(DxAssemblies)" Condition="$(LeaveDXAssemblies)!=true"></Delete>
	<CallTarget Targets="FixReferencesAfterBuild"/>
  </Target>
  <Target Name="Clean">
    <MSBuild Projects="@(CoreProjects)" Targets="Clean" Properties="Configuration=$(Configuration)" />
    <MSBuild Projects="@(EasyTestProjects)" Targets="Clean" Properties="Configuration=$(Configuration)" />
    <MSBuild Projects="@(HelperProjects)" Targets="Clean" Properties="Configuration=$(Configuration)" />
    <MSBuild Projects="$(VSAddons)" Targets="Clean" Properties="Configuration=$(RecompiledDXSources)" ContinueOnError="$(BatchCall)" />
    <MSBuild Projects="$(ModuleProjects)" Targets="Clean" Properties="Configuration=$(RecompiledDXSources)" />
    <MSBuild Projects="@(NHProjects)" Targets="Clean" Properties="Configuration=$(Configuration)" />
    <MSBuild Projects="$(XpandDocsPath)\Xpand.Docs.sln" Targets="Clean" Properties="Configuration=$(Configuration)" />
    <MSBuild Projects="@(DemoSolutions)" Targets="Clean" Properties="Configuration=$(Configuration);DefineConstants=CodeFirst;" />
    <MSBuild Projects="@(DemoTesterProjects)" Targets="Clean" Properties="Configuration=$(Configuration)" />
    <CreateItem Include="**/Debug/**/*.*;**/Release/**/*.*;**/EasyTestUsers/**/*.*">
      <Output ItemName="_binaryFiles" TaskParameter="Include" />
    </CreateItem>
    <Delete Files="@(_binaryFiles)" TreatErrorsAsWarnings="true" />
    <ItemGroup>
      <EasyTestVideoFolders Include="$([System.IO.Directory]::GetDirectories(&quot;.&quot;,&quot;ScreenCapture&quot;, SearchOption.AllDirectories))"/>
    </ItemGroup>
    <RemoveDir Directories="@(EasyTestVideoFolders)"></RemoveDir>
  </Target>
  <Target Name="Copy" DependsOnTargets="Build">
    <MakeDir Directories="$(BuildPath);$(TempPath)" />
    <CreateItem Include="$(XpandDLLPath)\*.*;" Exclude="$(XpandDLLPath)\*.locked;$(XpandDLLPath)\DevExpress*.*">
      <Output ItemName="files" TaskParameter="Include" />
    </CreateItem>
    <Copy SourceFiles="@(files)" DestinationFolder="$(TempPath)" />
    <CreateItem Include="Xpand.Key\Xpand.snk;">
      <!--Exclude="$(XpandDLLPath)\*.locked" -->
      <Output ItemName="keyFiles" TaskParameter="Include" />
    </CreateItem>
    <Copy SourceFiles="@(keyFiles)" DestinationFolder="$(BuildPath)\Xpand.Key" />
    <!-- TODO: All Tests 
		<CreateItem Include="Xpand\Xpand.Tests\**\bin\$(Configuration)\*.*" Exclude="Xpand\Xpand.Tests\**\bin\$(Configuration)\*.xml;Xpand\Xpand.Tests\**\bin\$(Configuration)\*.pdb;">
			<Output ItemName="TestFiles" TaskParameter="Include"/>
		</CreateItem>
		<Copy SourceFiles="@(TestFiles)" DestinationFolder="$(TestPath)" />
		-->
  </Target>

  <Target Name="PublishXpandDocsSite" DependsOnTargets="RunEasyTestsForDocsSite;UpdateXpandDocsSiteFiles;XpandDocsSiteDBUpdater"/>
  <Target Name="StartXpandDocsSite">
    <Exec Command="appcmd start site /site.name:$(DocsSiteName)" WorkingDirectory="$(windir)\system32\inetsrv"></Exec>
  </Target>
  <Target Name="KillXpandDocsSite">
    <MSBuild.ExtensionPack.Computer.Process TaskAction="Get" IncludeUserInfo="true">
      <Output ItemName="ProcessList" TaskParameter="Processes"/>
    </MSBuild.ExtensionPack.Computer.Process>
    <MSBuild.ExtensionPack.Computer.Process TaskAction="Terminate" ProcessId="%(ProcessList.ProcessId)" Condition="'%(ProcessList.User)' == '$(DocsSiteName)'"/>
    <Exec Command="appcmd stop site /site.name:$(DocsSiteName)" WorkingDirectory="$(windir)\system32\inetsrv"></Exec>
  </Target>
  <Target Name="UpdateXpandDocsSiteFiles">
    <Exec Command='$(ProjectConverterName) /sc "$(XpandDocsSitePath)"' WorkingDirectory="$(ProjectConverterPath)"></Exec>
    <MSBuild Projects="$(XpandDocsPath)\Xpand.Docs.sln" Targets="Build" Properties="Configuration=$(Configuration);DefineConstants=$(DefineConstants)" />
    <CallTarget Targets="KillXpandDocsSite" />
    <ItemGroup>
      <PackagedFiles Include="$(XpandDocsPath)\Xpand.Docs.Web\**\*.*;"
            Exclude="$(XpandDocsPath)\**\*.csproj;$(XpandDocsPath)\**\*.pdb;$(XpandDocsPath)\**\*.resx;$(XpandDocsPath)\**\*.log;$(XpandDocsPath)\**\*.bak;$(XpandDocsPath)\Xpand.Docs.Web\obj\**\*.*;$(XpandDocsPath)\Xpand.Docs.Web\Properties\*.*;$(XpandDocsPath)\Xpand.Docs.Web\**\*.cs;$(XpandDocsPath)\Xpand.Docs.Web\*.config"/>
    </ItemGroup>
    <Copy SourceFiles="@(PackagedFiles)" DestinationFiles="@(PackagedFiles->'$(XpandDocsSitePath)\%(RecursiveDir)%(Filename)%(Extension)')"/>
    <CallTarget Targets="StartXpandDocsSite" />
  </Target>
  <Target Name="ConfigXpandDocsSiteDBUpdater">
    <PropertyGroup>
      <DBUpdaterFolder>$(XpandDocsSitePath)\bin</DBUpdaterFolder>
      <DBUpdaterConfig>..\web.config</DBUpdaterConfig>
      <DBUpdaterDll>Xpand.docs.web.dll</DBUpdaterDll>
    </PropertyGroup>
  </Target>
  <Target Name="XpandDocsSiteDBUpdater" DependsOnTargets="ConfigXpandDocsSiteDBUpdater;DBUpdate">
  </Target>
  <Target Name="RunEasyTestsForDocsSite" DependsOnTargets="ConfigEasyTestParamsForDocsSite;RunEasyTests">
  </Target>
  <Target Name="ConfigEasyTestParamsForDocsSite">
    <PropertyGroup>
      <EasyTestFilter>Xpand.Docs\</EasyTestFilter>
      <FCWebDbUpdater>No</FCWebDbUpdater>
    </PropertyGroup>
    <ItemGroup>
      <EasyTests Remove="@(EasyTests)"></EasyTests>
      <EasyTestLogs Remove="@(EasyTestLogs)"></EasyTestLogs>
      <EasyProjects Remove="@(EasyProjects)"></EasyProjects>

      <EasyTests Include="$(MSBuildProjectDirectory)\$(EasyTestFilter)**\*.ets"/>
      <EasyProjects Include="$(MSBuildProjectDirectory)\$(EasyTestFilter)\Xpand.Docs.sln"></EasyProjects>
    </ItemGroup>
  </Target>
  <Target Name="w">
    <Message Text="@(EasyTests -> '%(Filename)','%0a')"></Message>
  </Target>
  <Target Name="PrintEasyTestLogs" >
    <ItemGroup>
      <FailedLogs Include="$(MSBuildProjectDirectory)\$(EasyTestFilter)**\TestsLog.xml"/>
    </ItemGroup>
    <MSBuild.ExtensionPack.Xml.XmlFile
      TaskAction="ReadElements" File="%(FailedLogs.FullPath)" Condition="'@(FailedLogs->Count())'!='0'"
      XPath="/Tests/Test[@Result='Warning' or @Result='Failed']" ReadChildrenToMetadata="true">
      <Output TaskParameter="Elements" ItemName="Test"/>
    </MSBuild.ExtensionPack.Xml.XmlFile>
    <Error Text="@(Test -> '%(ApplicationName) - %(Name)%0a%(Error)%0a','%0a')" Condition="'@(Test->Count())'!='0'"></Error>
  </Target>
  <Target Name="ConfigFCWebDbUpdater">
    <PropertyGroup>
      <DBUpdaterFolder>$(MSBuildProjectDirectory)\Demos\FeatureCenter\FeatureCenter.Web\bin</DBUpdaterFolder>
      <DBUpdaterConfig>..\web.config</DBUpdaterConfig>
      <DBUpdaterDll>FeatureCenter.Web.dll</DBUpdaterDll>
    </PropertyGroup>
  </Target>
  <Target Name="FCWebDbUpdater">
    <ItemGroup>
      <DbToDrop Include="Northwind;XpandFeatureCenterWeb;XpandFeatureCenterEasyTest;XpandFeatureCenterExceptionHandling;XpandFeatureCenterMultipleDataStore;XpandFeatureCenterWorldCreator;XpandFeatureCenter"></DbToDrop>
    </ItemGroup>
    <Exec Command='sqlcmd -E -S . -Q "ALTER DATABASE %(DbToDrop.Identity) SET SINGLE_USER WITH ROLLBACK IMMEDIATE"' ContinueOnError="false"/>
    <Exec Command='sqlcmd -E -S . -Q "DROP DATABASE %(DbToDrop.Identity)"' ContinueOnError="false"/>
    <CallTarget Targets="ConfigFCWebDbUpdater;DBUpdate"></CallTarget>
  </Target>
  <Target Name="DBUpdate">
    <Copy SourceFiles="$(DBUpdaterPath)\$(DBUpdaterName)" DestinationFolder="$(DBUpdaterFolder)"/>
    <Exec Command="$(DBUpdaterName) -silent $(DBUpdaterConfig) $(DBUpdaterDll) >$(OutputFile)" WorkingDirectory="$(DBUpdaterFolder)" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode"/>
    </Exec>
    <ReadLinesFromFile  File="$(OutputFile)">
      <Output  TaskParameter="Lines" ItemName="ExitCodeLines"/>
    </ReadLinesFromFile>
    <Error Text="@(ExitCodeLines->'%(Identity)', '%0a%0d')" Condition="'$(ErrorCode)' == '1'" />
    <Message Text="@(ExitCodeLines->'%(Identity)', '%0a%0d')" Condition="'$(ErrorCode)' != '1'" />
    <Delete Files="$(OutputFile)"></Delete>
  </Target>
  <Target Name="tmpStorage">
        <Message Text="%(EasyTestLogs.Identity)"></Message>
  </Target>
  <PropertyGroup>
    <EasyTestFilter>Demos\</EasyTestFilter>
  </PropertyGroup>
  <ItemGroup>
    <EasyTestLogs Include="$(MSBuildProjectDirectory)\**\TestsLog.xml"/>
    <EasyProjects Include="@(DemoSolutions)"/>
    <EasyProjects Include="@(DemoTesterProjects)"/>
    <EasyTestReqs Include="$(XpandDLLPath)\Xpand.ExpressApp.EasyTest.WinAdapter.dll;$(XpandDLLPath)\Xpand.ExpressApp.EasyTest.WebAdapter.dll;$(XpandDLLPath)\Xpand.EasyTest.dll;$(XpandDLLPath)\Fasterflect.dll;$(XpandDLLPath)\Aforge*.dll;$(XpandDLLPath)\Xpand.utils.dll"/>
    <EasyTestReqs Include="$(XpandDLLPath)\Xpand.ExpressApp.EasyTest.WinAdapter.pdb;$(XpandDLLPath)\Xpand.ExpressApp.EasyTest.WebAdapter.pdb;$(XpandDLLPath)\Xpand.EasyTest.pdb;$(XpandDLLPath)\Xpand.utils.pdb"/>
    <EasyTestReqs Include="$(XpandDLLPath)\windowsinput.dll;$(XpandDLLPath)\CommandLine.dll;$(XpandDLLPath)\ProcessAsUser.exe;$(XpandDLLPath)\ProcessAsUserWrapper.exe;$(TestExecutorPath);$(TestExecutorPath).config;$(_third_party_assemblies)\AxInterop.MSTSCLib.dll;$(_third_party_assemblies)\Interop.MSTSCLib.dll"/>
    <AutoTests Include="$(MSBuildProjectDirectory)\$(EasyTestFilter)**\AutoTest*.ets"/>
    <EasyTests Include="$(MSBuildProjectDirectory)\$(EasyTestFilter)**\*.ets"/>
  </ItemGroup>
  <Target Name="BuildEasyTest" Condition="('@(EasyTests->Count())'!='1' And $(EasyTestFilter)=='Demos\')">
	<!---->
	<MSBuild Projects="@(EasyProjects)" Targets="Build" Properties="Configuration=EasyTest" />
    <CallTarget Targets="FCWebDbUpdater" Condition="'$(FCWebDbUpdater)'==''" />
  </Target>
  <Target Name="RunEasyTests">
	<CallTarget Targets='BuildEasyTest' ></CallTarget>
    <Delete Files="@(EasyTestLogs)"/>	
    <CreateItem Include="@(EasyTestReqs)" AdditionalMetadata="CopiedToDir=%(EasyTests.RelativeDir);" >
      <Output ItemName="EasyTestReqsToDelete" TaskParameter="Include"/>
    </CreateItem>
    <Copy SourceFiles="@(EasytestReqs)" DestinationFolder="%(EasyTests.RelativeDir)"/>
    <WriteLinesToFile File="$(XpandDLLPath)\easytests.txt" Lines="@(EasyTests)" Overwrite="true"></WriteLinesToFile>
    <Exec Command="$(XpandDLLPath)\XpandTestExecutor.Win.exe easytests.txt" WorkingDirectory="$(XpandDLLPath)" />
	<Delete Files="%(EasyTestReqsToDelete.CopiedToDir)%(EasyTestReqsToDelete.Filename)%(EasyTestReqsToDelete.Extension)"/>
    <!--<CallTarget Targets="CreateEasyTestVideos"></CallTarget>-->
    <CallTarget Targets='PrintEasyTestLogs' ></CallTarget>
  </Target>
  <Target Name="CreateEasyTestVideos">
    <ItemGroup>
      <EasyTestVideoImages Include="**/ScreenCapture/*.png"/>
      <EasyTestVideoFolders Include="$([System.IO.Directory]::GetDirectories(&quot;.&quot;,&quot;ScreenCapture&quot;, SearchOption.AllDirectories))"/>
      <EasyTestVideoFoldersList Include="@(EasyTestVideoFolders->'.%(Identity)')"></EasyTestVideoFoldersList>
    </ItemGroup>
    <PropertyGroup>
	  <EasyTestVideoFolders>@(EasyTestVideoFoldersList)</EasyTestVideoFolders>
    </PropertyGroup>
    <ItemGroup>
      <VideoBuilderFiles Include="$(XpandDLLPath)\Aforge*.dll;$(_third_party_assemblies)\Aforge*.dll;$(_third_party_assemblies)\FFMPEG\*.*"></VideoBuilderFiles>
    </ItemGroup>
    <Copy SourceFiles="@(VideoBuilderFiles)" DestinationFolder="$(XpandDLLPath)" SkipUnchangedFiles="true"></Copy>
    <MSBuild Projects="$(MSBuildProjectFile)" Targets="ExecuteCommand" Properties="ExecCommand=VideoBuilder.exe $(EasyTestVideoFolders);ExecCommandWorkingDirectory=$(XpandDLLPath)" />
    <Delete Files="@(EasyTestVideoImages)"></Delete>
  </Target>
  <Target Name="Config">
  <MSBuild Projects="$(MSBuildProjectFile)" Targets="ExecuteCommand" Properties="ExecCommand=VideoBuilder.exe $(EasyTestVideoFolders);ExecCommandWorkingDirectory=$(XpandDLLPath)" />
    <Message Text="This sub-solution does not need configuration" />
  </Target>
  <Target Name="Report" DependsOnTargets="Clean;Build;Copy">
    <MakeDir Directories="$(ArtifactDirectory)" />
  </Target>
  <Target Name="Test">
  </Target>
  <Target Name="Integrate" DependsOnTargets="Clean;Test;Report;" />
  <!--For Continuous integration and automated releases-->
  <Target Name="Release" DependsOnTargets="Clean;_Version;Build;Report;" >
	<IndexSources/>
  </Target>
  <Target Name="Installer">
    <MakeDir Directories="$(InstallerFolder);" />
    <ItemGroup>
      <files Include="$(XpandDLLPath)\**\*.dll;$(XpandDLLPath)\*.exe;$(XpandDLLPath)\*.config" Exclude="$(XpandDLLPath)\DatabaseUpdate\**\*.*;$(XpandDLLPath)\FFMPEG\**\*.*;$(XpandDLLPath)\ImportExport\**\*.*;$(XpandDLLPath)\Packages\**\*.*;$(XpandDLLPath)\XAFImageFormatter\**\*.*;$(XpandDLLPath)\**\DevExpress.*;$(XpandDLLPath)\**\System.*"/>
    </ItemGroup>
    <Copy SourceFiles="@(files)" DestinationFiles="@(files->'$(InstallerFolder)\Xpand.DLL\%(RecursiveDir)%(Filename)%(Extension)')" />
    <CreateItem Include="$(XpandDesignExperiencePath)\**\*.*">
      <Output ItemName="XpandDesignExperienceFiles" TaskParameter="Include" />
    </CreateItem>
    <Copy SourceFiles="@(XpandDesignExperienceFiles)" DestinationFolder="$(InstallerFolder)\Xpand.DesignExperience\%(XpandDesignExperienceFiles.SubFolder)%(XpandDesignExperienceFiles.RecursiveDir)" />
    <!-- Source.zip -->
    <CreateItem Include="**\*.*" Exclude="**\_third_party_assemblies\packages\**\*.*;**\dxbuildgenerator\packages\**\*.*;**\_Resharper*\**\*.*;**\FunctionalTests\**\ScreenCapture\**\*.*;**\*.log;**\*web_view.html;**\*win_view.html;**\*web_view.jpeg;**\*win_view.jpeg;Build\**\*.*;Support\Build\Profile.Local\*.*;$(SourceExclusions);**\**\DevExpress*.dll;Xpand.DLL\**\*.*;**\*.docstates;**\*teamcity*;">
      <Output ItemName="_SourceFiles" TaskParameter="Include" />
    </CreateItem>
    <Zip Files="@(_SourceFiles)" ZipFileName="$(InstallerFolder)\Source.zip" Flatten="false" />
	<MSBuild Projects="$(MSBuildProjectFile)" Targets="ExecuteCommand" Properties="ExecCommand=Support\Tool\NSIS\makensis.exe /DVERSION=$(Version) Support\Build\Xpand.nsi" />
    <CreateItem Include="Support\Build\setup.exe">
      <Output ItemName="setupFiles" TaskParameter="Include" />
    </CreateItem>
    <Copy SourceFiles="@(setupFiles)" DestinationFiles="$(PackageDirectory)\eXpandFramework-$(Version).exe" />
    <Delete Files="@(setupFiles)" />
    <CallTarget Targets="Distrib"></CallTarget>
  </Target>
  <Target Name="DeployUpdate">
    <MakeDir Directories="$(DeploymentFolder);" />
    <CreateItem Include="$(PackageDirectory)\*.*;">
      <Output ItemName="deploymentFiles" TaskParameter="Include" />
    </CreateItem>
    <Copy SourceFiles="@(deploymentFiles)" DestinationFolder="$(DeploymentFolder)\%(deploymentFiles.SubFolder)%(deploymentFiles.RecursiveDir)" />
    <Time Format="yyyy-MM-dd HH:mm">
      <Output TaskParameter="FormattedTime" PropertyName="BuildTime" />
    </Time>
    <!-- Hack because buildtime is dynamically
		  http://social.msdn.microsoft.com/Forums/en-US/msbuild/thread/2c910802-e8c9-4bf1-bdb1-ef7835011eeb
		-->
    <Time Format="yyyy-MM-dd HH:mm">
      <Output TaskParameter="FormattedTime" PropertyName="BuildTime" />
    </Time>
    <CreateItem Include="BuildTime" AdditionalMetadata="ReplacementValue=$(BuildTime)">
      <Output TaskParameter="Include" ItemName="BuildTimeToken" />
    </CreateItem>
    <CreateItem Include="@(Tokens);@(BuildTimeToken);">
      <Output TaskParameter="Include" ItemName="AllTokens" />
    </CreateItem>
    <!--Index-->
    <Copy SourceFiles="Support\Template\index.template" DestinationFolder="$(TempPath)" />
    <TemplateFile Template="$(TempPath)\index.template" OutputFile="index.out" Tokens="@(AllTokens)" />
    <Copy SourceFiles="$(TempPath)\index.out" DestinationFiles="$(DeploymentFolder)\index.htm" />
  </Target>
  <Target Name="Distrib">
    <MakeDir Directories="$(PackageDirectory);" />
    <!-- Source.zip -->
	  <Copy SourceFiles="$(InstallerFolder)\Source.zip" DestinationFiles="$(PackageDirectory)\$(ProjectName)-Source-$(Version).zip"/>
    <!-- Lib.zip -->
    <CreateItem Include="$(TempPath)\*.*;" Exclude="$(TempPath)\DevExpress*;$(TempPath)\EmailModule*">
      <Output ItemName="_libFiles" TaskParameter="Include" />
    </CreateItem>
    <Zip Files="@(_libFiles)" ZipFileName="$(PackageDirectory)\$(ProjectName)-Lib-$(Version).zip" Flatten="true" />
    <!--
		Condition="$(DeployUpdate)=='true'" 
		-->
  </Target>
  <Target Name="Twitter">
    <MSBuild Projects="$(MSBuildProjectFile)" Targets="ExecuteCommand" Properties="ExecCommand=$(TwitterTool) &quot;$(TwitterConsumerKey)&quot; &quot;$(TwitterConsumerSecret)&quot; &quot;$(TwitterAccessToken)&quot; &quot;$(TwitterAccessTokenSecret)&quot;  &quot;new@expandframework v$(Version): http://goo.gl/g9wRy @DevExpress_XAF #dotnet #opensource #software #LOB #business #application #framework&quot;" />
  </Target>
  <Target Name="_Version">
    <FileUpdate Files="Xpand\Xpand.Utils\Properties\AssemblyInfo.cs" Regex="(\d+\.\d+\.\d+\.\d+)" ReplacementText="$(Version)" />
    <Time Format="yyyy-MM-dd HH:mm">
      <Output TaskParameter="FormattedTime" PropertyName="BuildTime" />
    </Time>
  </Target>
  <Target Name="ExecuteCommand">
      <Exec ContinueOnError="True" Command="$(ExecCommand)" ConsoleToMSBuild="true" WorkingDirectory="$(ExecCommandWorkingDirectory)" >
        <Output TaskParameter="ConsoleOutput" PropertyName="OutputOfExec" />
        <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
      </Exec>
      <Error Text="$(OutputOfExec)" Condition="'$(ErrorCode)' > '0'" />
  </Target>
  <ItemGroup>
    <NuspecFile Include="Support\Nuspec\*.nuspec" Exclude="Support\Nuspec\XtraDashboardWin.nuspec;Support\Nuspec\XtraDashboardWeb.nuspec;Support\Nuspec\DX-Nuspec\*.nuspec" Condition="$(SkipDashboard)=='true'"/>
    <NuspecFile Include="Support\Nuspec\*.nuspec" Exclude="Support\Nuspec\DX-Nuspec\*.nuspec" Condition="$(SkipDashboard)!='true'"/>
  </ItemGroup>
  <Target Name="NuGetPackage" Inputs="@(NuspecFile)" Outputs="NotUsedOutput">
    <CreateItem Include="$(XpandDLLPath)\*.pdb;">
      <Output ItemName="files" TaskParameter="Include" />
    </CreateItem>
    <Copy SourceFiles="@(files)" DestinationFolder="$(TempPath)" />
    <MakeDir Directories="$(BuildPath)\NuGet" />
    <MSBuild Projects="$(MSBuildProjectFile)" Targets="ExecuteCommand" Properties="ExecCommand=$(NuGetTool) pack %(NuspecFile.Identity) -OutputDirectory $(BuildPath)\NuGet -Version $(Version) -BasePath $(MSBuildProjectDirectory)" />
    <CreateItem Include="Build\NuGet\*.nupkg" >
      <Output TaskParameter="Include" ItemName="NuGetFile"/>
    </CreateItem>
  <Message Text="@(NuGetFile)"></Message>
  </Target>
  <Target Name="NuGet"  Inputs="@(NuGetFile)" Outputs="NotUsedOutput" DependsOnTargets="NuGetPackage">
    <MSBuild Projects="$(MSBuildProjectFile)" Targets="ExecuteCommand" Properties="ExecCommand=$(NuGetTool) push %(NuGetFile.Identity) $(NuGetApiKey)" />
  </Target>
</Project>
